generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String       @id @default(cuid())
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  password      String?
  firstName     String?
  lastName      String?
  accounts      Account[]
  contacts      Contact[]
  Newsletter    Newsletter[]
  sessions      Session[]
}

model Contact {
  id              String   @id @default(cuid())
  firstName       String
  lastName        String
  email           String
  subject         String?
  message         String
  userId          String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  company         String?  @default("")
  emailSent       Boolean  @default(false)
  telephoneNumber String?  @default("")
  privacyAccepted Boolean  @default(false)
  user            User?    @relation(fields: [userId], references: [id])

  @@index([email])
  @@index([createdAt])
  @@index([emailSent])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Newsletter {
  id        String   @id
  email     String   @unique
  userId    String?
  refNumber Int      @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime
  User      User?    @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([email])
  @@index([refNumber])
}
