name: CI

on:
  pull_request:
    branches: [main]

jobs:
  prettier_checks:
    name: Prettier Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
      - name: Install Dependencies
        run: npm install
      - name: Run the prettier tests
        run: npm run prettier
  type_checks:
    name: Types Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
      - name: Install Dependencies
        env:
          POSTGRES_URL_NON_POOLING: ${{ secrets.POSTGRES_URL_NON_POOLING }}
        run: npm install
      - name: Run the type tests
        env:
          POSTGRES_URL_NON_POOLING: ${{ secrets.POSTGRES_URL_NON_POOLING }}
        run: npm run test:type
  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
      - name: Install Dependencies
        env:
          POSTGRES_URL_NON_POOLING: ${{ secrets.POSTGRES_URL_NON_POOLING }}
          RESEND_EMAIL_KEY: ${{ secrets.RESEND_EMAIL_KEY }}
        run: npm install
      - name: Run the tests
        env:
          POSTGRES_URL_NON_POOLING: ${{ secrets.POSTGRES_URL_NON_POOLING }}
          RESEND_EMAIL_KEY: ${{ secrets.RESEND_EMAIL_KEY }}
        run: npm run test:unit
  sonar_coverage:
    name: SonarQube Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
      - name: Install Dependencies
        env:
          POSTGRES_URL_NON_POOLING: ${{ secrets.POSTGRES_URL_NON_POOLING }}
          RESEND_EMAIL_KEY: ${{ secrets.RESEND_EMAIL_KEY }}
        run: npm install
      - uses: SonarSource/sonarcloud-github-action@master
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          POSTGRES_URL_NON_POOLING: ${{ secrets.POSTGRES_URL_NON_POOLING }}
          RESEND_EMAIL_KEY: ${{ secrets.RESEND_EMAIL_KEY }}
        run: npm run test:coverage
#  wait_for_vercel:
#    name: Wait for vercel
#    runs-on: ubuntu-latest
#    outputs:
#      preview_url: ${{ steps.waitForVercelPreviewDeployment.outputs.url }}
#    steps:
#      - name: Wait for Vercel preview deployment to be ready
#        uses: patrickedqvist/wait-for-vercel-preview@main
#        id: waitForVercelPreviewDeployment
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}
#          max_timeout: 120
#  test_e2e:
#    name: Test e2e
#    needs: wait_for_vercel
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/setup-node@v4
#        with:
#          node-version: lts/*
#      - name: Install dependencies
#        run: npm ci
#      - name: Install Playwright Browsers
#        run: npx playwright install --with-deps
#      - name: Run Playwright tests
#        run: npx playwright test
#      - uses: actions/upload-artifact@v4
#        if: always()
#        with:
#          name: playwright-report
#          path: playwright-report/
#          retention-days: 30
#        env:
#          VERCEL_URL: ${{ needs.wait_for_vercel.outputs.preview_url }}
#          VERCEL_ENV: preview
